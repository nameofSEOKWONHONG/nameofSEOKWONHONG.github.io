@using Blazored.LocalStorage
@using eXtensionSharp
@using MudExample.Data
@inject ILocalizer Localizer
@inject ILocalStorageService LocalStorageService

@inherits MudExample.Infrastructure.JComponentBase<WeatherForecast>

<style type="text/css">
    .mud-table-head .header-centered th {
        text-align: center;
        font-size: 1.2em;
    }

    .mud-table-foot .bold-text .mud-table-cell {
        font-weight: 500;
    }
</style>

@if (Weathers == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <MudTable Items="@Weathers" MultiSelection="true" Hover="true" @bind-SelectedItems="selectedItems" Breakpoint="Breakpoint.Sm" Striped="true" Bordered="true"
              FixedHeader="true"
              Dense="true"
              Height="800px"
              Virtualize="true">
        <ColGroup>
            <col style="width: 60px;" />
            <col />
            <col />
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Temp. (C)</MudTh>
            <MudTh>Temp. (F)</MudTh>
            <MudTh>Summary</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd><MudLink Href="/weatherDetail">@context.Date?.ToShortDateString()</MudLink></MudTd>
            <MudTd>@context.TemperatureC</MudTd>
            <MudTd>@context.TemperatureF</MudTd>
            <MudTd>@context.Summary</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await ShowDialog(context.Id))">@Localizer["LBL0022"]</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    [Parameter] public List<WeatherForecast> Weathers { get; set; }
    private HashSet<WeatherForecast> selectedItems { get; set; }

    [Parameter]
    public HashSet<WeatherForecast> SelectedItems
    {
        get => selectedItems;
        set
        {
            if(value == selectedItems) return;
            selectedItems = value;
            if (SelectedItemsChanged.HasDelegate)
            {
                SelectedItemsChanged.InvokeAsync(selectedItems);
            }
        }
    }
    [Parameter] public EventCallback<HashSet<WeatherForecast>> SelectedItemsChanged { get; set; }
    [Parameter] public Func<int?, Task> ShowDialog { get; set; }
    [Parameter] public Func<Func<Task<Result>>, Task> OnDelete { get; set; }
}