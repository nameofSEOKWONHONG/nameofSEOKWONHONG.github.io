@using eXtensionSharp
@* 
worst case implement. why??? A very large number of calls due to the implementation of the control.
 *@

<MudSelect Label="@Label" @bind-Value="SelectedValue">
    @foreach (var item in SelectItems)
    {
        <MudSelectItem Value="item.Value">@item.Text</MudSelectItem>
    }
</MudSelect>
<br/>
<MudText>Parameter : @ItemId</MudText>
<MudText>ItemId Display : @_selectedItemId</MudText>

@code {
    [Parameter] public int ItemId { get; set; }
    [Parameter] public ISelector Selector { get; set; }
    [Parameter] public string Label { get; set; }
    private string _selectedValue;
    [Parameter] public EventCallback<string> SelectedValueChanged { get; set; }

    [Parameter]
    public string SelectedValue
    {
        get => _selectedValue;
        set
        {
            if (value == _selectedValue)
                return;

            _selectedValue = value;
            if (SelectedValueChanged.HasDelegate)
            {
                SelectedValueChanged.InvokeAsync(_selectedValue);
            }
        }
    }

    List<SelectItem> SelectItems = new();
    private string _selectedItemId;

    protected override async Task OnInitializedAsync()
    {
        this.SelectItems = await this.Selector.GetItems();
    }

    private int previousItemId = int.MaxValue;
    protected override void OnParametersSet()
    {
        if (this.SelectItems.xIsEmpty()) return;
        if (previousItemId != ItemId)
        {
            previousItemId = ItemId;
            var item = this.SelectItems[ItemId];
            _selectedItemId = $"{item.Text}, {item.Value}";
            SelectedValue = item.Value;
        }
    }

}