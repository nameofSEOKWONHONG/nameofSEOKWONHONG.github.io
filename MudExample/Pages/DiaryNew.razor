@page "/diary/new"
@using MudExample.Data
@inherits MudExample.Components.Base.PageComponentBase

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudBreadcrumbs Items="@Breadcrumbs"></MudBreadcrumbs>

    <MudPaper Class="d-flex justify-end flex-grow-1 gap-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">@Localizer["LBL0041"]</MudButton>
    </MudPaper>
    <br/>
    <MudPaper>
        <MudTextField T="string" Label="Title" Required="true" RequiredError="Title is required!" @bind-Value="title"/>
    </MudPaper>
    <br/>
    <MarkdownEditor @bind-Value="markdownValue"
                    Placeholder="@Localizer["LBL0043"]"
                    Theme="MarkdownEditorTheme.Light"
                    @ref="editor"/>
</MudContainer>


@code {
    MarkdownEditor editor;
    string markdownValue;
    string markdownHtml;

    bool mode = false;

    string title;
    
    [Inject] DiaryViewModel viewModel { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // await editor.SetValueAsync("hello");
        }
    }
    

    protected override Task OnRetrieve(Func<Task<Result>> func)
    {
        return Task.CompletedTask;
    }

    Task OnMarkdownValueChanged(string value)
    {   
        return Task.CompletedTask;
    }

    Task OnMarkdownValueHTMLChanged(string value)
    {
        markdownHtml = value;
        return Task.CompletedTask;
    }

    async Task Save()
    {
        await viewModel.AddDiary(new Diary()
        {
            Title = this.title,
            Content = markdownValue,
        });
    }
}