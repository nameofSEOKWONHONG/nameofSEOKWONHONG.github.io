@page "/"
@inherits MudExample.PageComponentBase

<PageTitle>Who I AM</PageTitle>

<MudTabs Rounded="true">
    <MudTabPanel Text="Me">
        <MudPaper Class="default-paper">
            <h1>안녕하세요. @me.Name 입니다.</h1>
            <MudTextField @bind-Value="me.Birth" Label="@nameof(me.Birth)" Variant="Variant.Filled"/>
            <MudTextField @bind-Value="me.Gender" Label="@nameof(me.Gender)" Variant="Variant.Filled"/>
            <MudTextField @bind-Value="me.Email" Label="@nameof(me.Email)" Variant="Variant.Filled"/>
            @{
                var mailto = $"mailto:{me.Email}";
            }
            <div style="text-align-last: end;">
                <a type="button" class="mud-button-root mud-button mud-button-filled mud-button-filled-primary mud-button-filled-size-medium mud-ripple" href="@mailto">Send Email</a>    
            </div>
        </MudPaper>
        <MudPaper Class="mud-paper">
            <label>바인딩</label>
            <MudText>@me.Birth</MudText>
            <MudText>@me.Gender</MudText>
            <MudText>@me.Email</MudText>
        </MudPaper>
    </MudTabPanel>
    <MudTabPanel Text="History">
        <MudPaper>
            <MudTimeline>
                <MudTimelineItem Color="Color.Info" Size="Size.Small">
                    <ItemOpposite>
                        <MudText Color="Color.Info" Typo="Typo.h5">2010</MudText>
                    </ItemOpposite>
                    <ItemContent>
                        <MudText Color="Color.Info" Typo="Typo.h6" GutterBottom="true">Douzone</MudText>
                        <MudText>
                            아이플러스 개발팀 소속으로 윈폼, 사이베이스 개발에 참여함. 아이플러스는 중견/중소 기업용 ERP 제품으로 인사, 물류 파트를 담당. C#, .net framework 2.0~3.5 기준으로 작업하였으며 firebird database도 사용함.
                            동시에 안드로이드 진저브레드 기준으로 전자세금계산서, 회사 관리 등의 메뉴를 작업함.
                            기타 mssql, oracle, postgresql 의 database를 경험함.
                        </MudText>
                    </ItemContent>
                </MudTimelineItem>
                <MudTimelineItem Color="Color.Success" Size="Size.Small">
                    <ItemOpposite>
                        <MudText Color="Color.Success" Typo="Typo.h5">2013</MudText>
                    </ItemOpposite>
                    <ItemContent>
                        <MudText Color="Color.Success" Typo="Typo.h6" GutterBottom="true">가상화 콘솔</MudText>
                        <MudText>
                            가상화 개발 회사에서 6개월간 재직하였으며 관리자 콘솔을 개발함. 윈폼 기반으로 서버측과 통신하여 하이퍼바이저를 통해 VM을 생성 및 관리하는 콘솔 제작.
                            동시에 red hat linux에서 동작하는 하이퍼바이저 서비스 제작.
                            이 기간에 VM에 대한 생성 및 네트워크에 대해 배울 수 있던 시간이였음.
                            구조는 생각보다 간단하다. 관리자 콘솔 - 메인 서버 - 하이퍼바이저 서버 간의 통신을 통해 사용자의 VM을 생성해 주는 것이 주 기능으로 하이퍼바이저 서버에 deamon service를 설치하고 해당 서비스가
                            메인 서버측과 통신하여 VM을 생성한다. thrift와 GRPC에 대해 알게된 계기.
                        </MudText>
                    </ItemContent>
                </MudTimelineItem>
                <MudTimelineItem Color="Color.Error" Size="Size.Small">
                    <ItemOpposite>
                        <MudText Color="Color.Error" Typo="Typo.h5">2014</MudText>
                    </ItemOpposite>
                    <ItemContent>
                        <MudText Color="Color.Error" Typo="Typo.h6" GutterBottom="true">SK M&S</MudText>
                        <MudText>
                            SK 자회사로 주로 SI와 솔루션 개발을 담당했다. SI는 SK 홀딩스 분담금 시스템 개발에 참여하여 혼자 개발 및 납품 하였다. 수주 금액은 10억으로 이후 100억대의 사업에 부서가 참여하는 계기가 되었다.
                            CS 환경으로 윈폼, MSSQL로 작업하였다. 이 때 다양한 기술을 사용하려고 노력하였는데 트랜잭션 관리를 위한 TransactionScope 및 service - repository 패턴을 사용하여 개발 하였다.
                            이 때 까지는 윈폼에서 async, await 기능이 부족하여 동기화로 UI 작업을 하였다. 개인적으로 개발한 DB MAPPER를 사용하여 개발 하였고 이후에는 Dapper로 넘어갔다.
                            Dapper가 빠른 것은 데이터 모델에 대한 캐싱에 있다는 것을 알았다.
                            솔루션으로는 델파이 기반의 채팅 솔루션을 유지보수 하였으며, 화면 녹화 프로그램을 개발하였다. 해당 프로그램은 오픈 레코더란 이름으로 무료버전을 계속 개발 하였다.
                            이외에 웹 개발을 위한 프레임워크를 개발하려 하였으나 개인사정으로 최종 개발하지 못하고 중도 하차 하였다.
                        </MudText>
                    </ItemContent>
                </MudTimelineItem>
                <MudTimelineItem Color="Color.Success" Size="Size.Small">
                    <ItemOpposite>
                        <MudText Color="Color.Success" Typo="Typo.h5">2017</MudText>
                    </ItemOpposite>
                    <ItemContent>
                        <MudText Color="Color.Success" Typo="Typo.h6" GutterBottom="true">예스24</MudText>
                        <MudText>
                            엔터사업부에서 영화, 티켓 관련 개발에 참여 하였다. 웹폼 및 플래시 기반의 사이트를 유지보수 및 개발 하였다. 특정 할인 이벤트를 자동화 하였고 주로 좌석도 및 예매 연동 개발을 하였다.
                            플래시 이슈로 관리자 개편 작업을 진행 하였으며, 이후 영화 사이트 개편도 진행 하였다. 모두 MVC 기반으로 작업 하였다.
                            영화 사이트 개편시 사용자 경험 향상과 개발 편의성을 높이기 위해 예매 부분은 모두 파셜뷰로 작업하였고 각 뷰를 히든 처리하는 방식으로 작업하여 SPA와 비슷한 효과를 주기위해 노력하였다.
                            쿠키 사용과 브라우저 메모리 DB를 사용하였다. 예매 부분을 획기적으로 변경하였는데 Factory 패턴을 사용하여 예매처별, 극장별로 관심사로 분리하였으며 기존 if-else코드를 삭제하기 위해 노력하였다.
                            이외에도 기존 극장사 통신서버가 관리 이슈로 별도로 분리되어 있었으나 관리를 위해 사이트 프로젝트에 병합하였다.
                            이 때도 느낀 것이 많은데, 개발은 절대 혼자할 수 없는 것이다.
                        </MudText>
                    </ItemContent>
                </MudTimelineItem>
                <MudTimelineItem Color="Color.Error" Size="Size.Small">
                    <ItemOpposite>
                        <MudText Color="Color.Error" Typo="Typo.h5">2019</MudText>
                    </ItemOpposite>
                    <ItemContent>
                        <MudText Color="Color.Error" Typo="Typo.h6" GutterBottom="true">이카운트</MudText>
                        <MudText>
                            SasS형 ERP 제품을 개발하는 회사다. 기술적으로 매우 높은 수준을 유지하는 기업으로 그 편차가 매우 큰 문제가 있지만 많이 배우고 재미있게 일했던 회사이다.
                            기술적으로 매우 흥미로운데, 기본적으로 MVC이지만 브라우저 동작을 SPA에 가깝게 유지하고 있고, 자체적으로 백엔드, 프론트엔드 프레임워크를 개발하여 사용하고 있다.
                            백엔드의 경우 MVC 프레임워크를 완전히 개조한 수준이며 엄청난 최적화 기법들을 사용하고 있다. 자체 ORM도 개발하여 사용하고 있다. 이 ORM이 정말 재미있는데 사실 프로시저 생성기인 동시에
                            쿼리 캐시를 사용하여 같은 운영 환경에서도 서로 다른 캐시를 바라보고 있어도 오류가 발생하지 않는다. 또한 사실상 무제한 배포에 가까운 시스템을 운영하고 있고 그러한 시스템을 만들기 위해
                            많은 고민을 한 흔적들이 보인다. 백엔드 개발에 정말 큰 도움이 되었다.
                            프론트엔드 개발도 매우 흥미로운데 기본적으로 jquery 기반이지만 동시에 javascript component를 이용하여 동적화면 생성 엔진을 가지고 있다. 이 부분이 의미하는 바는 사용자가 화면을 커스텀하도록 하고
                            해당 데이터를 DB에 저장하며 각 화면을 호출할 때 마다 화면 DOM을 동적으로 생성해서 View에 Attach한다는 것이다. 따라서 부하도 매우 크고 작업량도 상당하다.
                            따라서 캐시에 매우 비중이 크며 속도 향상을 위한 최적화 작업에 많은 비용을 사용했었다.
                            이외에 다양한 자동화 앱 및 솔루션도 개발하고 있고 개인적으로는 화면 녹화 프로그램 개발 경험을 이용하여 이카운트 녹화 프로그램을 개발하여 사용자 오류를 시각적으로 볼 수 있는 프로그램을 개발 하였다.
                            이전에도 존재하였으나 유지보수 비용에 약 천만원을 사용하고 있었으므로 라이센스비 절약에 도움이 되었을 것이다.
                        </MudText>
                    </ItemContent>
                </MudTimelineItem>
                <MudTimelineItem Color="Color.Success" Size="Size.Small">
                    <ItemOpposite>
                        <MudText Color="Color.Success" Typo="Typo.h5">현재</MudText>
                    </ItemOpposite>
                    <ItemContent>
                        <MudText Color="Color.Success" Typo="Typo.h6" GutterBottom="true">알 수 없음</MudText>
                        <MudText>
                            현재는 예전의 포부는 모두 잊고 지방에서 평범한 회사원이 되기 위해 노력하는 동시에 꿈틀거리는 욕망사이에 방황하고 있다.
                            여러 회사를 거치면서 기억나는 분이 딱 2명 있는데 예스24에서 박과장님, 이카운트의 최본부장님이다. 이런 사람이 되어야 겠다는 포부를 가졌다만, 현재는 많이 포기한 생태.
                            건강상의 문제도 있고 당분간은 천천히 일하고자 한다.
                        </MudText>
                    </ItemContent>
                </MudTimelineItem>                
            </MudTimeline>
        </MudPaper>
    </MudTabPanel>
</MudTabs>

@code {
    Person me = new Person();

    protected override void OnInitialized()
    {
        me = new Person();
        me.Name = "홍석원";
        me.Birth = "1982";
        me.Gender = "남성";
        me.Email = "h20913@gmail.com";
        base.OnInitialized();
    }

    class Person
    {
        public string Name { get; set; }
        public string Birth { get; set; }
        public string Gender { get; set; }
        public string Email { get; set; }
    }
}