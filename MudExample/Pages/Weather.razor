@page "/weather"
@inject HttpClient Http
@using Blazored.LocalStorage
@using eXtensionSharp
@using MudExample.Data
@using MudExample.Components
@inherits MudExample.Components.Base.PageComponentBase


<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudBreadcrumbs Items="@Breadcrumbs"></MudBreadcrumbs>

    <MudPaper>
        <MudStack Class="d-flex justify-end flex-grow-1 gap-4" Row="true">
            <MudTextField T="string" Label="Summary" @bind-Value="searchValue"/>
            <MudIconButton Icon="@menuButtonIcon" OnClick="OnExpandCollapseClick"/>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => OnRetrieve(null))">@Localizer["LBL0043"]</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(async () => await ShowDialog(null))">@Localizer["LBL0020"]</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => OnDelete(null))">@Localizer["LBL0021"]</MudButton>            
        </MudStack>
        <br/>
        <MudStack Spacing="2" Style="@stackStyle">
            <MudCollapse Expanded="_expanded">
                <MudPage Column="2" Row="1" Height="60px">
                    <MudSection Column="1" Row="1">
                        <MudTextField T="int?" Label="Temperature" @bind-Value="searchTemp" Style="width: 80%;"/>
                    </MudSection>
                    <MudSection Column="2" Row="1">
                        <MudDatePicker T="DateTime?" Label="Date" @bind-Date="searchDate" Style="width: 80%;"/>
                    </MudSection>
                </MudPage>
                <MudPaper class="d-flex justify-end flex-grow-1 gap-4" Elevation="0">
                    <MudIconButton Icon="@Icons.Material.Filled.ClearAll" OnClick="Callback"/>    
                </MudPaper>
            </MudCollapse>
        </MudStack>        
    </MudPaper>
    <br/>
    
    <WeatherListComponent Weathers="forecasts" @bind-SelectedItems="selectedItems" ShowDialog="ShowDialog" OnDelete="OnDelete"/>
</MudContainer>

<MudOverlay @bind-Visible="ProgressVisible" DarkBackground="true" ZIndex="9999">
    <MudItem xs="12" Class="d-flex align-center">
        <MudProgressCircular Indeterminate="true" />
    </MudItem>
</MudOverlay>

@code {
    private HashSet<WeatherForecast> selectedItems = new();
    private List<WeatherForecast>? forecasts;
    string searchValue;
    int? searchTemp;
    DateTime? searchDate;
    bool _expanded = false;
    string stackStyle = "content-visibility: hidden;";
    string menuButtonIcon = Icons.Material.Rounded.Menu;


    protected override async Task OnInitRetrieve()
    {
        await OnRetrieve(null);
    }

    protected override Task OnRetrieve(Func<Task<Result>> func)
    {
        func = async () =>
        {
            var list = await this.LocalStorageService.GetItemAsync<List<WeatherForecast>>("weathers");
            if (list.xIsEmpty())
            {
                list =
                [
                    new() { Date = DateTime.Parse("2022-01-06"), TemperatureC = 1, Summary = "Freezing" },
                    new() { Date = DateTime.Parse("2022-01-07"), TemperatureC = 14, Summary = "Bracing" },
                    new() { Date = DateTime.Parse("2022-01-08"), TemperatureC = -13, Summary = "Freezing" },
                    new() { Date = DateTime.Parse("2022-01-09"), TemperatureC = -16, Summary = "Balmy" },
                    new() { Date = DateTime.Parse("2022-01-10"), TemperatureC = -2, Summary = "Chilly" }
                ];
                var row = 1;
                foreach (var item in list)
                {
                    item.Id = row;
                    row += 1;
                }

                await this.LocalStorageService.SetItemAsync("weathers", list);
            }

            var searchList = list.AsEnumerable();
            if (searchValue.xIsNotEmpty())
            {
                searchList = searchList.Where(m => m.Summary.ToUpper().Contains(searchValue.ToUpper()));
            }

            if (searchTemp > 0)
            {
                searchList = searchList.Where(m => m.TemperatureC >= searchTemp);
            }

            if (searchDate.xIsNotEmpty())
            {
                searchList = searchList.Where(m => m.Date >= searchDate.Value);
            }

            forecasts = searchList.ToList();

            return new Result(true, "Success");
        };

        return base.OnRetrieve(func);
    }

    async Task ShowDialog(int? id)
    {
        var parameters = new DialogParameters();
        var list = await LocalStorageService.GetItemAsync<List<WeatherForecast>>("weathers");
        var exists = list?.FirstOrDefault(m => m.Id == id);
        if (exists.xIsNotEmpty())
        {
            parameters.Add("WeatherForecast", exists);
        }

        var dialog = await this.DialogService.ShowAsync<WeatherDialog>(null, parameters, new DialogOptions()
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Large,
        });
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await Task.Delay(1000);
            if (result.Data is WeatherForecast t)
            {
                if (t.Id <= 0)
                {
                    t.Id = list!.MaxBy(m => m.Id)!.Id + 1;
                    this.forecasts?.Add(t);
                    await this.LocalStorageService.SetItemAsync("weathers", this.forecasts);
                }
                else
                {
                    var item = this.forecasts.FirstOrDefault(m => m.Id == t.Id);
                    if (item.xIsNotEmpty())
                    {
                        this.forecasts?.Remove(item);
                    }

                    this.forecasts?.Add(t);
                    await this.LocalStorageService.SetItemAsync("weathers", this.forecasts);
                }
            }

            this.Snackbar.Add($"success", Severity.Success);
        }
        else
        {
            this.Snackbar.Add("canceled", Severity.Warning);
        }

        StateHasChanged();
    }

    protected override Task OnDelete(Func<Task<Result>> func)
    {
        if (selectedItems.Count <= 0)
        {
            this.Snackbar.Add("selected items is empty", Severity.Warning);
            return Task.CompletedTask;
        }

        func = async () =>
        {
            foreach (var weatherForecast in selectedItems)
            {
                this.forecasts?.Remove(weatherForecast);
                await this.LocalStorageService.SetItemAsync("weathers", this.forecasts);
            }

            await Task.Delay(1000);

            return new Result(true, "succeed");
        };
        return base.OnDelete(func);
    }
    
    private void OnExpandCollapseClick() {
        _expanded = !_expanded;
        if (_expanded)
        {
            stackStyle = "";
            menuButtonIcon = Icons.Material.Rounded.MenuOpen;
        }
        else
        {
            stackStyle = "content-visibility: hidden;";
            menuButtonIcon = Icons.Material.Rounded.Menu;
        }
    }

    private void Callback(MouseEventArgs obj)
    {
        searchValue = string.Empty;
        searchTemp = null;
        searchDate = null;
    }

}