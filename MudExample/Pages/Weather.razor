@page "/weather"
@inject HttpClient Http
@using Blazored.LocalStorage
@using eXtensionSharp
@using MudExample.Data
@using MudExample.Components
@inherits MudExample.Components.Base.PageComponentBase

<style type="text/css">
    .mud-table-head .header-centered th {
        text-align: center;
        font-size: 1.2em;
    }

    .mud-table-foot .bold-text .mud-table-cell {
        font-weight: 500;
    }
</style>
<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudBreadcrumbs Items="@Breadcrumbs"></MudBreadcrumbs>

    <MudPaper Class="d-flex justify-end flex-grow-1 gap-4">
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(async () => await ShowDialog(null))">@Localizer["LBL0020"]</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => OnDelete(null))">@Localizer["LBL0021"]</MudButton>
    </MudPaper>
    <br/>
    
    <WeatherListComponent Weathers="forecasts" @bind-SelectedItems="selectedItems" ShowDialog="ShowDialog" OnDelete="OnDelete"/>
</MudContainer>

<MudOverlay @bind-Visible="ProgressVisible" DarkBackground="true" ZIndex="9999">
    <MudItem xs="12" Class="d-flex align-center">
        <MudProgressCircular Indeterminate="true" />
    </MudItem>
</MudOverlay>

@code {
    private HashSet<WeatherForecast> selectedItems = new();
    private List<WeatherForecast>? forecasts;

    protected override async Task OnInitRetrieve()
    {
        var list = await this.LocalStorageService.GetItemAsync<List<WeatherForecast>>("weathers");
        if (list.xIsEmpty())
        {
            list =
            [
                new() { Date = DateTime.Parse("2022-01-06"), TemperatureC = 1, Summary = "Freezing" },
                new() { Date = DateTime.Parse("2022-01-07"), TemperatureC = 14, Summary = "Bracing" },
                new() { Date = DateTime.Parse("2022-01-08"), TemperatureC = -13, Summary = "Freezing" },
                new() { Date = DateTime.Parse("2022-01-09"), TemperatureC = -16, Summary = "Balmy" },
                new() { Date = DateTime.Parse("2022-01-10"), TemperatureC = -2, Summary = "Chilly" }
            ];
            var row = 1;
            foreach (var item in list)
            {
                item.Id = row;
                row += 1;
            }

            await this.LocalStorageService.SetItemAsync("weathers", list);
        }

        forecasts = list;
        await Task.Delay(10);
    }
    
    async Task ShowDialog(int? id)
    {
        var parameters = new DialogParameters();
        var list = await LocalStorageService.GetItemAsync<List<WeatherForecast>>("weathers");
        var exists = list?.FirstOrDefault(m => m.Id == id);
        if (exists.xIsNotEmpty())
        {
            parameters.Add("WeatherForecast", exists);
        }

        var dialog = await this.DialogService.ShowAsync<WeatherDialog>(null, parameters, new DialogOptions()
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Large,
        });
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await Task.Delay(1000);
            if (result.Data is WeatherForecast t)
            {
                if (t.Id <= 0)
                {
                    t.Id = list!.MaxBy(m => m.Id)!.Id + 1;
                    this.forecasts?.Add(t);
                    await this.LocalStorageService.SetItemAsync("weathers", this.forecasts);
                }
                else
                {
                    var item = this.forecasts.FirstOrDefault(m => m.Id == t.Id);
                    if (item.xIsNotEmpty())
                    {
                        this.forecasts?.Remove(item);
                    }

                    this.forecasts?.Add(t);
                    await this.LocalStorageService.SetItemAsync("weathers", this.forecasts);
                }
            }

            this.Snackbar.Add($"success", Severity.Success);
        }
        else
        {
            this.Snackbar.Add("canceled", Severity.Warning);
        }

        StateHasChanged();
    }

    protected override Task OnDelete(Func<Task<Result>> func)
    {
        if (selectedItems.Count <= 0)
        {
            this.Snackbar.Add("selected items is empty", Severity.Warning);
            return Task.CompletedTask;
        }

        func = async () =>
        {
            foreach (var weatherForecast in selectedItems)
            {
                this.forecasts?.Remove(weatherForecast);
                await this.LocalStorageService.SetItemAsync("weathers", this.forecasts);
            }

            await Task.Delay(1000);

            return new Result(true, "succeed");
        };
        return base.OnDelete(func);
    }
}