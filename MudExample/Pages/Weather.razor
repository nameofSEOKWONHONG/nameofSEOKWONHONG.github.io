@page "/weather"
@inject HttpClient Http
@inherits PageComponentBase

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <MudPaper Class="d-flex justify-end flex-grow-1 gap-4">
        <MudButton OnClick="Add">ADD</MudButton>
        <MudButton OnClick="@(() => Remove(null))">REMOVE</MudButton>
    </MudPaper>
    <br/>
    <MudTable Items="@forecasts" MultiSelection="true" Hover="true" @bind-SelectedItems="_selectedItems">
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Temp. (C)</MudTh>
            <MudTh>Temp. (F)</MudTh>
            <MudTh>Summary</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Date.ToShortDateString()</MudTd>
            <MudTd>@context.TemperatureC</MudTd>
            <MudTd>@context.TemperatureF</MudTd>
            <MudTd>@context.Summary</MudTd>
        </RowTemplate>
    </MudTable>
}

<MudOverlay @bind-Visible="ProgressVisible" DarkBackground="true" ZIndex="9999">
    <MudItem xs="12" Class="d-flex align-center">
        <MudProgressCircular Indeterminate="true" />
    </MudItem>
</MudOverlay>

@code {
    private HashSet<WeatherForecast> _selectedItems = new();
    private List<WeatherForecast> forecasts;

    async Task Add()
    {
        var dialog = await this.DialogService.ShowAsync<WeatherDialog>(null, new DialogOptions()
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Large,
        });
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            this.Snackbar.Add($"ok:{result.Data}", Severity.Success);
        }
        else
        {
            this.Snackbar.Add("canceled", Severity.Warning);
        }


    }
    
    protected override Task Remove(Func<Task> func)
    {
        if (_selectedItems.Count <= 0)
        {
            this.Snackbar.Add("selected items is empty", Severity.Warning);
            return Task.CompletedTask;
        }        
        
        func = async () =>
        {
            foreach (var weatherForecast in _selectedItems)
            {
                this.forecasts.Remove(weatherForecast);
            }
            
            await Task.Delay(1000);
        };
        return base.Remove(func);
    }

    private MudDataGrid<Dictionary<string, string>> dataGrid = null;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<List<WeatherForecast>>("sample-data/weather.json");
        var id = 1;
        foreach (var weatherForecast in forecasts)
        {
            weatherForecast.Id = id;
            id++;
        }
        
        dataGrid?.RenderedColumns.Clear();
        await Task.Delay(10);
    }

    public class WeatherForecast
    {
        public int Id { get; set; }
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}