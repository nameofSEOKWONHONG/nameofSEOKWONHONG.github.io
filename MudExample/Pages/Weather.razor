@page "/weather"
@inject HttpClient Http
@using System.Runtime.InteropServices
@using Microsoft.EntityFrameworkCore
@using MudExample.Data
@inherits PageComponentBase

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <MudPaper Class="d-flex justify-end flex-grow-1 gap-4">
        <MudButton OnClick="@(async () => await ShowDialog(null))">ADD</MudButton>
        <MudButton OnClick="@(() => Remove(null))">REMOVE</MudButton>
    </MudPaper>
    <br/>
    <MudTable Items="@forecasts" MultiSelection="true" Hover="true" @bind-SelectedItems="_selectedItems">
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Temp. (C)</MudTh>
            <MudTh>Temp. (F)</MudTh>
            <MudTh>Summary</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Date?.ToShortDateString()</MudTd>
            <MudTd>@context.TemperatureC</MudTd>
            <MudTd>@context.TemperatureF</MudTd>
            <MudTd>@context.Summary</MudTd>
            <MudTd>
                <MudButton Class="btn btn-primary" OnClick="@(async () => await ShowDialog(context.Id))">Modify</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

<MudOverlay @bind-Visible="ProgressVisible" DarkBackground="true" ZIndex="9999">
    <MudItem xs="12" Class="d-flex align-center">
        <MudProgressCircular Indeterminate="true" />
    </MudItem>
</MudOverlay>

@code {

    [Inject]
    private IDbContextFactory<AppDbContext> _dbContextFactory { get; set; }
    
    private HashSet<WeatherForecast> _selectedItems = new();
    private List<WeatherForecast>? forecasts;

    async Task ShowDialog(int? id)
    {
        var parameters = new DialogParameters();
        var exist = forecasts.FirstOrDefault(m => m.Id == id);
        if (exist != null)
        {
            parameters.Add("WeatherForecast", exist);
        }
        
        var dialog = await this.DialogService.ShowAsync<WeatherDialog>(null, parameters , new DialogOptions()
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Large,
        });
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            if (exist == null)
            {
                if (result.Data is WeatherForecast t)
                {
                    t.Id = forecasts.MaxBy(m => m.Id)!.Id + 1;
                    this.forecasts.Add(t);
                }                
            }

            this.Snackbar.Add($"success", Severity.Success);
        }
        else
        {
            this.Snackbar.Add("canceled", Severity.Warning);
        }
    }
    
    protected override Task Remove(Func<Task> func)
    {
        if (_selectedItems.Count <= 0)
        {
            this.Snackbar.Add("selected items is empty", Severity.Warning);
            return Task.CompletedTask;
        }        
        
        func = async () =>
        {
            foreach (var weatherForecast in _selectedItems)
            {
                this.forecasts?.Remove(weatherForecast);
            }
            
            await Task.Delay(1000);
        };
        return base.Remove(func);
    }

    private MudDataGrid<Dictionary<string, string>> dataGrid = null;

    protected override async Task OnInitializedAsync()
    {
        

        var db = await _dbContextFactory.CreateDbContextAsync();
        await db.Database.EnsureCreatedAsync();
        
        var exists = await db.WeatherForecasts.AnyAsync();
        if (!exists)
        {
            var items = new List<WeatherForecast>()
            {
                new WeatherForecast { Date = DateTime.Parse("2022-01-06"), TemperatureC = 1, Summary = "Freezing" },
                new WeatherForecast { Date = DateTime.Parse("2022-01-07"), TemperatureC = 14, Summary = "Bracing" },
                new WeatherForecast { Date = DateTime.Parse("2022-01-08"), TemperatureC = -13, Summary = "Freezing" },
                new WeatherForecast { Date = DateTime.Parse("2022-01-09"), TemperatureC = -16, Summary = "Balmy" },
                new WeatherForecast { Date = DateTime.Parse("2022-01-10"), TemperatureC = -2, Summary = "Chilly" },
            };
            await db.WeatherForecasts.AddRangeAsync(items);
            await db.SaveChangesAsync();
        }

        forecasts = await db.WeatherForecasts.ToListAsync();
        dataGrid?.RenderedColumns.Clear();
        await Task.Delay(10);
    }
}