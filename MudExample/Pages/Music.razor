@* I did everything I could. *@

@page "/music"

@using System.Timers
@using eXtensionSharp
@using KristofferStrube.Blazor.WebAudio
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@using KristofferStrube.Blazor.MediaCaptureStreams
@using KristofferStrube.Blazor.WebIDL
@using MudExample.Data

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

@inherits MudExample.Components.Base.PageComponentBase

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudBreadcrumbs Items="@Breadcrumbs"></MudBreadcrumbs>

    <MudPaper Class="d-flex flex-column flex-grow-1 gap-4" Elevation="0">
        @{
            var cssDark = LayoutState.IsDark ? "visualizer-container-dark" : "visualizer-container-light";
            <div class="mud-paper @cssDark">
                @if (tracks[currentTrack].Contains("INDIGO.mp3"))
                {
                    var t1 = playTime * 1.2;
                    var t2 = playTime;

                    if (playTime > 243)
                    {
                        alpha -= 0.0023;
                    }
                    
                    if (t1 >= 80) t1 = 80;
                    if (t2 >= 60) t2 = 60;

                    for (int i = 0; i < 32; i++)
                    {
                        var height = visualizerData[i];
                        var hue = (i * 360) / visualizerData.Length;
                        
                        if (playTime > 179.3 && playTime < 203)
                        {
                            t2 = Random.Shared.Next(60, (int)(playTime / 2));
                        }
                        
                        <div class="bar" style="height: @height%; background-color: hsl(@hue, @t1%, @t2%, @alpha)"></div>
                    }
                }
                else
                {
                    for (int i = 0; i < 32; i++)
                    {
                        var height = visualizerData[i];
                        var hue = (i * 360) / visualizerData.Length;
                        <div class="bar" style="height: @height%; background-color: hsl(@hue, 80%, 60%)"></div>
                    }
                }                    
            </div>
        }

        <style>
            .visualizer-container-dark {
                display: flex;
                align-items: flex-end;  /* 아래쪽 정렬을 제거하고 기본값으로 */
                height: 300px;
                gap: 2px;
                padding: 10px;
            }
            .visualizer-container-light {
                display: flex;
                align-items: flex-end;  /* 아래쪽 정렬을 제거하고 기본값으로 */
                height: 300px;
                gap: 2px;
                padding: 10px;
            }

            .bar {
                flex: 1;
                transition: height 200ms ease;
                border-radius: 4px;
            }
        </style>
        <MudPaper Class="d-flex justify-center flex-grow-1 gap-4" Elevation="0">
            @if (isShuffle)
            {
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.ShuffleOn" OnClick="RandomizeTracks" Size="Size.Small"/>
            }
            else
            {
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.Shuffle" OnClick="RandomizeTracks" Size="Size.Small"/>
            }
            <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.ArrowLeft" OnClick="PreviousTrack" Size="Size.Small"/>
            
            @if (playing)
            {
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.PauseCircle" OnClick="Pause" Size="Size.Small"/>
            }
            else
            {
                <MudLoadingButton Variant="Variant.Text" @bind-Loading="loading" ButtonVariant="ButtonVariant.IconButton" OnClick="Play" Icon="@Icons.Material.Filled.PlayArrow" Size="Size.Small"/>
            }

            <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.Stop" OnClick="Stop" Size="Size.Small"/>
            <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.ArrowRight" OnClick="NextTrack" Size="Size.Small"/>

            @if (repeatMode == 0)
            {
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.Repeat" OnClick="Repeat" Size="Size.Small"/>
            }
            else if (repeatMode == 1)
            {
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.RepeatOn" OnClick="Repeat" Size="Size.Small"/>
            }
            else
            {
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.RepeatOne" OnClick="Repeat" Size="Size.Small"/>
            }
        </MudPaper>
        <MudPaper Class="d-flex justify-center flex-grow-1 gap-4" Elevation="0">
            <MudText Typo="Typo.inherit" Color="Color.Primary">
                @TimeSpan.FromSeconds(playTime).ToString(@"mm\:ss")
            </MudText>
            <MudSlider T="double" Color="Color.Info" Size="Size.Small" Value="@playTime" Max="@trackDuration" Class="my-1" ValueChanged="Seek" @onmousedown="OnMouseDown" @onmouseup="OnMouseUp" Variant="Variant.Filled">
            </MudSlider>
            <MudText Typo="Typo.inherit" Color="Color.Secondary">
                @TimeSpan.FromSeconds(trackDuration).ToString(@"mm\:ss")
            </MudText>
        </MudPaper>
    </MudPaper>

</MudContainer>

@code {
    [Inject] LayoutState LayoutState { get; set; }
    private double alpha = 1;
    private string url;
    private int repeatMode;
    private bool isShuffle;
    private bool loading;
    
    private AudioContext context = default!;
    private AudioDestinationNode destination = default!;
    private AudioBufferSourceNode currentAudioBufferNode = default!;
    private AudioBuffer currentAudioBuffer = default!;
    
    private bool playing;
    private bool currentTrackLoaded = false;
    private int currentTrack = 0;
    private double playTime;
    private double startTime;
    private double? pauseTime;
    private double offset;
    private double trackDuration;
    private int interactions;
    private List<string> tracks = new() {
        "mp3/Adam_MacDougall.mp3",
        "mp3/INDIGO.mp3"
    };
    private byte[]?[] loadedTracks = new byte[]?[4];
    
    private double[] visualizerData = new double[32];
    private AnalyserNode? analyser;
    private MediaDevices? mediaDevices;
    private string? error;
    private bool makeMeasurements = false;
    private MediaStream? mediaStream;
    private string? selectedAudioSource;
    private double peakFrequency = 0;

    private bool isDarkMode;

    System.Timers.Timer _timer;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _timer = new Timer();
            _timer.Interval = 500;
            _timer.Elapsed += TimerOnElapsed;
            _timer.Start();
        }
        base.OnAfterRender(firstRender);
    }

    private async void TimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        if (!playing)
        {
            if (repeatMode == 1)
            {
                await NextTrack();
            }
            else if (repeatMode == 2)
            {
                await Play();
            }
            else
            {
                await Stop();
            }
        }
    }

    async Task UpdateVisualizer()
    {
        if (analyser.xIsEmpty()) 
        {
            analyser = await context.CreateAnalyserAsync();
            await currentAudioBufferNode.ConnectAsync(analyser);
        }

        if (currentAudioBufferNode.DisposesJSReference)
        {
            await currentAudioBufferNode.ConnectAsync(analyser);
        }

        var frequencyBinCount = await analyser.GetFrequencyBinCountAsync();
        var dataArray = new byte[frequencyBinCount];
        var uint8Array = await Uint8Array.CreateAsync(JSRuntime, dataArray.Length);
        await analyser.GetByteFrequencyDataAsync(uint8Array);
        
        for (int i = 0; i < 32; i++)
        {
            visualizerData[i] = (await uint8Array.AtAsync(i)) / 255.0 * 100;
        }
    }

    async Task EnsureInitialized()
    {
        if (context is { }) return;

        context = await AudioContext.CreateAsync(JSRuntime);
        destination = await context.GetDestinationAsync();
    }
    
    async Task EnsureCurrentTrackLoaded()
    {
        if (currentTrackLoaded) return;
        
        loading = true;

        // Dispose old audio buffer
        if (currentAudioBuffer.xIsNotEmpty())
        {
            await currentAudioBuffer.DisposeAsync();
        }

        if (loadedTracks[currentTrack].xIsEmpty())
        {
            loadedTracks[currentTrack] = await HttpClient.GetByteArrayAsync(tracks[currentTrack]);
        }
        AudioBuffer nextAudioBuffer = await context.DecodeAudioDataAsync(loadedTracks[currentTrack]);

        currentAudioBuffer = nextAudioBuffer;
        trackDuration = await currentAudioBuffer.GetDurationAsync();

        currentTrackLoaded = true;

        if (tracks[currentTrack].Contains("INDIGO.mp3"))
        {
            Console.WriteLine("♬ NXCRE & The Villains - INDIGO ♬");
        }

        loading = false;
    }
    
    public async Task Play()
    {
        alpha = 1;
        StateHasChanged();
        
        await EnsureInitialized();
        if (playing) return;
        interactions++;
        await EnsureCurrentTrackLoaded();

        currentAudioBufferNode = await context.CreateBufferSourceAsync();
        await currentAudioBufferNode.SetBufferAsync(currentAudioBuffer);
        await currentAudioBufferNode.ConnectAsync(destination);
        if (pauseTime is null)
        {
            await currentAudioBufferNode.StartAsync();
        }
        else
        {
            await currentAudioBufferNode.StartAsync(when: 0, offset: offset);
        }
        startTime = await context.GetCurrentTimeAsync();
        
        playing = true;
        
        var currentInteractions = interactions;
        while (currentInteractions == interactions)
        {
            playTime = await context.GetCurrentTimeAsync() - startTime + offset;
            await UpdateVisualizer();
            StateHasChanged();
            if (playTime >= trackDuration)
            {
                await Pause();
            }
            await Task.Delay(16);
        }
    }

    async Task Stop()
    {
        if (!playing) return;
        interactions++;

        await currentAudioBufferNode.DisconnectAsync();
        await currentAudioBufferNode.StopAsync();
        await currentAudioBufferNode.DisposeAsync();

        playTime = 0;
        offset = 0;

        for (var i = 0; i < 32; i++)
        {
            visualizerData[i] = 0;
        }
        playing = false;
        
        StateHasChanged();
    }
    
    async Task Pause()
    {
        if (!playing) return;
        interactions++;

        await currentAudioBufferNode.DisconnectAsync();
        await currentAudioBufferNode.StopAsync();
        await currentAudioBufferNode.DisposeAsync();

        var currentTime = await context.GetCurrentTimeAsync();
        pauseTime = await context.GetCurrentTimeAsync();
        if (offset + currentTime - startTime > trackDuration)
        {
            offset = 0;
        }
        else
        {
            offset += currentTime - startTime;
        }

        for (var i = 0; i < 32; i++)
        {
            visualizerData[i] = 0;
        }
        playing = false;
        
        StateHasChanged();
    }
    
    Task PreviousTrack() => SwitchTrack(() => currentTrack = (currentTrack - 1 + tracks.Count) % tracks.Count);
    Task NextTrack() => SwitchTrack(() => currentTrack = (currentTrack + 1) % tracks.Count);
    
    async Task SwitchTrack(Action changeTrack)
    {
        var wasPlaying = playing;
        if (wasPlaying)
        {
            await Pause();
        }
        changeTrack();
        currentTrackLoaded = false;
        
        offset = 0;
        playTime = 0;
        if (wasPlaying)
        {
            await Play();
        }
    }

    List<string> srcTracks = new(); 
    public async Task RandomizeTracks()
    {
        isShuffle = !isShuffle;

        var wasPlaying = playing;
        if (wasPlaying)
        {
            await Pause();
        }

        if (isShuffle)
        {
            tracks = tracks.OrderBy(x => Random.Shared.Next()).ToList();            
        }
        else
        {
            srcTracks = tracks.ToList();    
        }
        
        loadedTracks = new byte[]?[4];
        currentTrackLoaded = false;
        currentTrack = 0;
        offset = 0;
        playTime = 0;
        if (wasPlaying)
        {
            await Play();
        }
        
        StateHasChanged();
    }

    void Repeat()
    {
        repeatMode++;
        if (repeatMode > 2) repeatMode = 0;
    }

    void Seek(double seek)
    {
        offset = seek;
    }
    
    private async Task OnMouseDown(MouseEventArgs obj)
    {
        await Pause();
    }

    private async Task OnMouseUp(MouseEventArgs obj)
    {
        await Play();
    }    
    
    public override async ValueTask DisposeAsync()
    {
        await Pause();
    }
}
