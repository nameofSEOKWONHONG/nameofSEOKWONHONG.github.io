@* I did everything I could. *@

@page "/music"

@using System.Drawing
@using System.Timers
@using eXtensionSharp
@using KristofferStrube.Blazor.WebAudio
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@using KristofferStrube.Blazor.MediaCaptureStreams
@using KristofferStrube.Blazor.WebIDL
@using MudExample.Data

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

@inherits MudExample.Components.Base.PageComponentBase

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudBreadcrumbs Items="@Breadcrumbs"></MudBreadcrumbs>

    <MudPaper Class="d-flex flex-column flex-grow-1 gap-4" Elevation="0">
        @{
            var cssDark = LayoutState.IsDark ? "visualizer-container-dark" : "visualizer-container-light";
            <div class="mud-paper @cssDark">            
                @if (playing)
                {   
                    @if (tracks[currentTrack].Contains("INDIGO.mp3"))
                    {
                        var t1 = playTime * 1.2;
                        var t2 = playTime;

                        if (playTime > 243)
                        {
                            alpha -= 0.0023;
                        }
                
                        if (t1 >= 80) t1 = 80;
                        if (t2 >= 60) t2 = 60;

                        for (int i = 0; i < 32; i++)
                        {
                            var height = visualizerData[i];
                            var hue = (i * 360) / visualizerData.Length;
                    
                            if (playTime > 179.3 && playTime < 203)
                            {
                                t2 = Random.Shared.Next(60, (int)(playTime / 2));
                            }
                    
                            <div class="bar" style="height: @height%; background-color: hsl(@hue, @t1%, @t2%, @alpha)"></div>
                        }
                    }
                    else
                    {
                        for (int i = 0; i < 32; i++)
                        {
                            var height = visualizerData[i];
                            var hue = (i * 360) / visualizerData.Length;
                            <div class="bar" style="height: @height%; background-color: hsl(@hue, 80%, 60%)"></div>
                        }
                    }
                }
            </div>
        }

        <style>
            .visualizer-container-dark {
                display: flex;
                align-items: flex-end;  /* 아래쪽 정렬을 제거하고 기본값으로 */
                height: 300px;
                gap: 2px;
                padding: 10px;
            }
            .visualizer-container-light {
                display: flex;
                align-items: flex-end;  /* 아래쪽 정렬을 제거하고 기본값으로 */
                height: 300px;
                gap: 2px;
                padding: 10px;
            }

            .bar {
                flex: 1;
                transition: height 200ms ease;
                border-radius: 4px;
            }
        </style>
        <MudPaper Class="d-flex justify-center flex-grow-1 gap-4" Elevation="0">
            @if (isShuffle)
            {
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.ShuffleOn" OnClick="RandomizeTracks" Size="Size.Small"/>
            }
            else
            {
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.Shuffle" OnClick="RandomizeTracks" Size="Size.Small"/>
            }
            <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.ArrowLeft" OnClick="PreviousTrack" Size="Size.Small"/>
            
            @if (playing)
            {
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.PauseCircle" OnClick="Pause" Size="Size.Small"/>
            }
            else
            {
                <MudIconButton Variant="Variant.Text" OnClick="Play" Icon="@Icons.Material.Filled.PlayArrow" Size="Size.Small"/>
            }

            <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.Stop" OnClick="Stop" Size="Size.Small"/>
            <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.ArrowRight" OnClick="NextTrack" Size="Size.Small"/>

            @if (repeatMode == 0)
            {
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.Repeat" OnClick="Repeat" Size="Size.Small"/>
            }
            else if (repeatMode == 1)
            {
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.RepeatOn" OnClick="Repeat" Size="Size.Small"/>
            }
            else
            {
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.RepeatOne" OnClick="Repeat" Size="Size.Small"/>
            }
        </MudPaper>
        <MudPaper Class="d-flex justify-center flex-grow-1 gap-4" Elevation="0">
            <MudText Typo="Typo.inherit" Color="Color.Primary">
                @TimeSpan.FromSeconds(playTime).ToString(@"mm\:ss")
            </MudText>
            <MudSlider T="double" Color="Color.Info" Size="Size.Small" Value="@playTime" Max="@trackDuration" Class="my-1" ValueChanged="Seek" @onmousedown="OnMouseDown" @onmouseup="OnMouseUp" Variant="Variant.Filled">
            </MudSlider>
            <MudText Typo="Typo.inherit" Color="Color.Secondary">
                @TimeSpan.FromSeconds(trackDuration).ToString(@"mm\:ss")
            </MudText>
        </MudPaper>
        <br/>
        <MudPaper Class="d-flex justify-space-between flex-grow-1 gap-4" Elevation="0">
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" Accept=".mp3">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.UploadFile">
                        Upload Files
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => OpenDrawer(Anchor.End))" StartIcon="@Icons.Material.Filled.Lyrics">Lyrics</MudButton>
        </MudPaper>
    </MudPaper>

    @if (tracks.xIsNotEmpty())
    {
        @if (tracks[currentTrack].Contains("apt"))
        {
            <MudDrawer @bind-Open="@_open" Width="@_width" Height="@_height" Anchor="@_anchor" Elevation="2" Variant="@DrawerVariant.Temporary" Style="padding: 50px;">
                <MudDrawerHeader>
                    <MudText Typo="Typo.h6">♬ @tracks[currentTrack].xGetFileNameWithoutExtension() ♬</MudText>
                </MudDrawerHeader>
                @if(playing) {
                    var items = lyrics.Where(m => m.Item1 >= playTime).Take(20).ToList();
                    if (items.xIsNotEmpty())
                    {
                        foreach (var item in items)
                        {
                            <MudText Typo="Typo.subtitle1">@item.Item2</MudText>
                        }
                    }
                }
                <MudSpacer/>
                <MudIconButton Icon="@Icons.Material.Filled.Close" Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseDrawer"/>
            </MudDrawer>        
        }        
    }
</MudContainer>

@code {
    [Inject] LayoutState LayoutState { get; set; }
    private double alpha = 1;
    private string url;
    private int repeatMode;
    private bool isShuffle;
    private bool loading;
    
    private AudioContext context = default!;
    private AudioDestinationNode destination = default!;
    private AudioBufferSourceNode currentAudioBufferNode = default!;
    private AudioBuffer currentAudioBuffer = default!;
    
    private bool playing;
    private bool currentTrackLoaded = false;
    private int currentTrack = 0;
    private double playTime;
    private double startTime;
    private double? pauseTime;
    private double offset;
    private double trackDuration;
    private int interactions;
    private List<string> tracks = new() { };
    private List<byte[]> loadedTracks = new List<byte[]>();
    
    private double[] visualizerData = new double[32];
    private AnalyserNode? analyser;
    private MediaDevices? mediaDevices;
    private string? error;
    private bool makeMeasurements = false;
    private MediaStream? mediaStream;
    private string? selectedAudioSource;
    private double peakFrequency = 0;

    private bool isDarkMode;

    System.Timers.Timer _timer;
    
    private bool _open;
    private Anchor _anchor;
    private string _width, _height;

    private List<ValueTuple<double, string>> lyrics = new()
    {
            new ValueTuple<double, string>(6, "수정이가 좋아하는 랜덤 게임"),
            new ValueTuple<double, string>(10, "랜덤 게임"),
            new ValueTuple<double, string>(12, "Game start"),
            new ValueTuple<double, string>(13, "아파트, 아파트"),
            new ValueTuple<double, string>(14, "아파트, 아파트"),
            new ValueTuple<double, string>(15, "아파트, 아파트"),
            new ValueTuple<double, string>(17, "Uh, uh-huh, uh-huh"),
            new ValueTuple<double, string>(18, "아파트, 아파트"),
            new ValueTuple<double, string>(19, "아파트, 아파트"),
            new ValueTuple<double, string>(20, "아파트, 아파트"),
            new ValueTuple<double, string>(22, "Uh, uh-huh, uh-huh"),
            new ValueTuple<double, string>(30, "Kissy face, kissy face"),
            new ValueTuple<double, string>(32, "Sent to your phone, but"),
            new ValueTuple<double, string>(34, "I'm tryna kiss your lips for real (Uh-huh, uh-huh)"),
            new ValueTuple<double, string>(36, "Red hearts, red hearts"),
            new ValueTuple<double, string>(38, "That's what I'm on, yeah"),
            new ValueTuple<double, string>(40, "Come give me somethin' I can feel, oh-oh, oh"),
            new ValueTuple<double, string>(42, "Don't you want me like I want you, baby?"),
            new ValueTuple<double, string>(44, "Don't you need me like I need you now?"),
            new ValueTuple<double, string>(46, "Sleep tomorrow, but tonight, go crazy"),
            new ValueTuple<double, string>(48, "All you gotta do is just meet me at the"),
            new ValueTuple<double, string>(51, "아파트, 아파트"),
            new ValueTuple<double, string>(52, "아파트, 아파트"),
            new ValueTuple<double, string>(53, "아파트, 아파트"),
            new ValueTuple<double, string>(54, "Uh, uh-huh, uh-huh"),
            new ValueTuple<double, string>(56, "아파트, 아파트"),
            new ValueTuple<double, string>(57, "아파트, 아파트"),
            new ValueTuple<double, string>(58, "아파트, 아파트"),
            new ValueTuple<double, string>(64, "Uh, uh-huh, uh-huh"),
            new ValueTuple<double, string>(66, "It's whatever (Whatever), it's whatever (Whatever)"),
            new ValueTuple<double, string>(68, "It's whatever (Whatever) you like (Woo)"),
            new ValueTuple<double, string>(70, "Turn this 아파트 into a club (Uh-huh, uh-huh)"),
            new ValueTuple<double, string>(72, "I'm talkin' drink, dance, smoke, freak, party all night (Come on)"),
            new ValueTuple<double, string>(74, "건배, 건배, girl, what's up? Oh-oh, oh"),
            new ValueTuple<double, string>(76, "Don't you want me like I want you, baby?"),
            new ValueTuple<double, string>(78, "Don't you need me like I need you now?"),
            new ValueTuple<double, string>(80, "Sleep tomorrow, but tonight, go crazy"),
            new ValueTuple<double, string>(82, "All you gotta do is just meet me at the"),
            new ValueTuple<double, string>(84, "아파트, 아파트"),
            new ValueTuple<double, string>(86, "아파트, 아파트"),
            new ValueTuple<double, string>(88, "아파트, 아파트"),
            new ValueTuple<double, string>(90, "Uh, uh-huh, uh-huh"),
            new ValueTuple<double, string>(92, "아파트, 아파트"),
            new ValueTuple<double, string>(94, "아파트, 아파트"),
            new ValueTuple<double, string>(96, "아파트, 아파트"),
            new ValueTuple<double, string>(98, "Uh, uh-huh, uh-huh"),

            new ValueTuple<double, string>(104, "Hey, so now you know the game"),
            new ValueTuple<double, string>(108, "Are you ready?"),
            new ValueTuple<double, string>(112, "’Cause I'm comin' to get ya, get ya, get ya"),
            new ValueTuple<double, string>(116, "Hold on, hold on"),
            new ValueTuple<double, string>(120, "I'm on my way"),
            new ValueTuple<double, string>(124, "Yeah, yeah, yeah-yeah, yeah"),
            new ValueTuple<double, string>(128, "I’m on my way"),
            new ValueTuple<double, string>(134, "Hold on, hold on"),
            new ValueTuple<double, string>(138, "I'm on my way"),
            new ValueTuple<double, string>(142, "Yeah, yeah, yeah-yeah, yeah"),
            new ValueTuple<double, string>(146, "I'm on my way"),
            
            new ValueTuple<double, string>(148, "Don't you want me like I want you, baby?"),
            new ValueTuple<double, string>(150, "Don't you need me like I need you now?"),
            new ValueTuple<double, string>(152, "Sleep tomorrow, but tonight, go crazy"),
            new ValueTuple<double, string>(154, "All you gotta do is just meet me at the"),
            new ValueTuple<double, string>(156, "아파트, 아파트"),
            new ValueTuple<double, string>(157, "아파트, 아파트"),
            new ValueTuple<double, string>(158, "아파트, 아파트"),
            new ValueTuple<double, string>(160, "Just meet me at the (Uh-huh, uh-huh)"),
            new ValueTuple<double, string>(162, "아파트, 아파트"),
            new ValueTuple<double, string>(163, "아파트, 아파트"),
            new ValueTuple<double, string>(164, "아파트, 아파트"),
            new ValueTuple<double, string>(166, "Just meet me at the (Uh-huh, uh-huh)"),
            new ValueTuple<double, string>(168, "아파트, 아파트"),
            new ValueTuple<double, string>(179, "아파트, 아파트"),
            new ValueTuple<double, string>(170, "아파트, 아파트"),
            new ValueTuple<double, string>(172, "Just meet me at the (Uh-huh, uh-huh)"),
            new ValueTuple<double, string>(173, "아파트, 아파트"),
            new ValueTuple<double, string>(174, "아파트, 아파트"),
            new ValueTuple<double, string>(175, "아파트, 아파트"),
            new ValueTuple<double, string>(176, "Uh, uh-huh, uh-huh")


    };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _timer = new Timer();
            _timer.Interval = 500;
            _timer.Elapsed += TimerOnElapsed;
            _timer.Start();
        }
        base.OnAfterRender(firstRender);
    }

    private async void TimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        if (tracks.xIsEmpty()) return;
        if (playTime >= trackDuration)
        {
            if (repeatMode == 1)
            {
                await NextTrack();
                await Task.Delay(1000);
                await Play();
            }
            else if (repeatMode == 2)
            {
                await Play();
            }
            else
            {
                await Stop();
            }
        }
    }

    async Task UpdateVisualizer()
    {
        if (analyser.xIsEmpty()) 
        {
            analyser = await context.CreateAnalyserAsync();
            await currentAudioBufferNode.ConnectAsync(analyser);
        }

        if (currentAudioBufferNode.DisposesJSReference)
        {
            await currentAudioBufferNode.ConnectAsync(analyser);
        }

        var frequencyBinCount = await analyser.GetFrequencyBinCountAsync();
        var dataArray = new byte[frequencyBinCount];
        var uint8Array = await Uint8Array.CreateAsync(JSRuntime, dataArray.Length);
        await analyser.GetByteFrequencyDataAsync(uint8Array);
        
        for (int i = 0; i < 32; i++)
        {
            visualizerData[i] = (await uint8Array.AtAsync(i)) / 255.0 * 100;
        }
    }

    async Task EnsureInitialized()
    {
        if (context is { }) return;

        context = await AudioContext.CreateAsync(JSRuntime);
        destination = await context.GetDestinationAsync();
    }
    
    async Task EnsureCurrentTrackLoaded()
    {
        if (currentTrackLoaded) return;
        
        loading = true;

        // Dispose old audio buffer
        if (currentAudioBuffer.xIsNotEmpty())
        {
            await currentAudioBuffer.DisposeAsync();
        }

        if (loadedTracks[currentTrack].xIsEmpty())
        {
            loadedTracks[currentTrack] = await HttpClient.GetByteArrayAsync(tracks[currentTrack]);
        }
        AudioBuffer nextAudioBuffer = await context.DecodeAudioDataAsync(loadedTracks[currentTrack]);

        currentAudioBuffer = nextAudioBuffer;
        trackDuration = await currentAudioBuffer.GetDurationAsync();

        currentTrackLoaded = true;

        if (tracks[currentTrack].Contains("INDIGO.mp3"))
        {
            Console.WriteLine("♬ NXCRE & The Villains - INDIGO ♬");
        }

        loading = false;
    }
    
    public async Task Play()
    {
        if (tracks.xIsEmpty())
        {
            this.Snackbar.Add("track is empty", Severity.Error);
            return;
        }
        
        alpha = 1;
        StateHasChanged();
        
        await EnsureInitialized();
        if (playing) return;
        interactions++;
        await EnsureCurrentTrackLoaded();

        currentAudioBufferNode = await context.CreateBufferSourceAsync();
        await currentAudioBufferNode.SetBufferAsync(currentAudioBuffer);
        await currentAudioBufferNode.ConnectAsync(destination);
        if (pauseTime is null)
        {
            await currentAudioBufferNode.StartAsync();
        }
        else
        {
            await currentAudioBufferNode.StartAsync(when: 0, offset: offset);
        }
        startTime = await context.GetCurrentTimeAsync();
        
        playing = true;
        
        var currentInteractions = interactions;
        while (currentInteractions == interactions)
        {
            playTime = await context.GetCurrentTimeAsync() - startTime + offset;
            await UpdateVisualizer();
            StateHasChanged();
            if (playTime >= trackDuration)
            {
                await Pause();
            }
            await Task.Delay(16);
        }
    }

    async Task Stop()
    {
        if (!playing) return;
        interactions++;

        await currentAudioBufferNode.DisconnectAsync();
        await currentAudioBufferNode.StopAsync();
        await currentAudioBufferNode.DisposeAsync();

        playTime = 0;
        offset = 0;

        for (var i = 0; i < 32; i++)
        {
            visualizerData[i] = 0;
        }
        playing = false;
        
        StateHasChanged();
    }
    
    async Task Pause()
    {
        if (!playing) return;
        interactions++;

        await currentAudioBufferNode.DisconnectAsync();
        await currentAudioBufferNode.StopAsync();
        await currentAudioBufferNode.DisposeAsync();

        var currentTime = await context.GetCurrentTimeAsync();
        pauseTime = await context.GetCurrentTimeAsync();
        if (offset + currentTime - startTime > trackDuration)
        {
            offset = 0;
        }
        else
        {
            offset += currentTime - startTime;
        }

        for (var i = 0; i < 32; i++)
        {
            visualizerData[i] = 0;
        }
        playing = false;
        
        StateHasChanged();
    }
    
    Task PreviousTrack() => SwitchTrack(() => currentTrack = (currentTrack - 1 + tracks.Count) % tracks.Count);
    Task NextTrack() => SwitchTrack(() => currentTrack = (currentTrack + 1) % tracks.Count);
    
    async Task SwitchTrack(Action changeTrack)
    {
        var wasPlaying = playing;
        if (wasPlaying)
        {
            await Pause();
        }
        changeTrack();
        currentTrackLoaded = false;
        
        offset = 0;
        playTime = 0;
        if (wasPlaying)
        {
            await Play();
        }
    }

    List<string> srcTracks = new(); 
    public async Task RandomizeTracks()
    {
        isShuffle = !isShuffle;

        var wasPlaying = playing;
        if (wasPlaying)
        {
            await Pause();
        }

        if (isShuffle)
        {
            tracks = tracks.OrderBy(x => Random.Shared.Next()).ToList();            
        }
        else
        {
            srcTracks = tracks.ToList();    
        }
        
        loadedTracks = new List<byte[]>();
        currentTrackLoaded = false;
        currentTrack = 0;
        offset = 0;
        playTime = 0;
        if (wasPlaying)
        {
            await Play();
        }
        
        StateHasChanged();
    }

    void Repeat()
    {
        repeatMode++;
        if (repeatMode > 2) repeatMode = 0;
    }

    void Seek(double seek)
    {
        offset = seek;
    }
    
    private async Task OnMouseDown(MouseEventArgs obj)
    {
        await Pause();
    }

    private async Task OnMouseUp(MouseEventArgs obj)
    {
        await Play();
    }    
    
    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        if(files.Count <= 0) return;
        
        long maxFileSize = 1024 * 1024 * 15; // Example: 15 MB
        foreach (var browserFile in files)
        {
            var filebytes = new byte[browserFile.Size];
            var stream = await browserFile.OpenReadStream(maxFileSize).ReadAsync(filebytes);
            tracks.Add(browserFile.Name);
            loadedTracks.Add(filebytes);
        }

        await Task.Delay(200);

        await Play();
    }
    
    private void OpenDrawer(Anchor anchor)
    {
        _open = true;
        _anchor = anchor;

        switch (anchor)
        {
            case Anchor.Start:
                _width = "300px";
                _height = "100%";
                break;
            case Anchor.End:
                _width = "380px";
                _height = "100%";
                break;
            case Anchor.Bottom:
                _width = "100%";
                _height = "200px";
                break;
            case Anchor.Top:
                _width = "100%";
                _height = "350px";
                break;
        }

        if (tracks.xIsEmpty())
        {
            Snackbar.Add("upload apt.mp3", Severity.Info);
        }
    }

    void CloseDrawer()
    {
        _open = false;
    }
    
    public override async ValueTask DisposeAsync()
    {
        await Pause();
    }
}
