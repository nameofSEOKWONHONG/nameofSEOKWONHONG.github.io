@page "/settings/users"
@using eXtensionSharp
@using Microsoft.AspNetCore.WebUtilities
@using MudExample.Components
@using MudExample.Data
@inject Selector Selector
@inject HttpClient HttpClient

@inherits MudExample.Components.Base.SessionPageComponent

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudBreadcrumbs Items="@Breadcrumbs"></MudBreadcrumbs>

    <MudPaper Class="d-flex justify-center flex-grow-1 gap-4">
        <MudSelect T="string" Label="Role" ValueChanged="RoleChanged" Value="RoleName">
            <MudSelectItem Value="@("administrator")">administrator</MudSelectItem>
            <MudSelectItem Value="@("user")">user</MudSelectItem>
            <MudSelectItem Value="@("guest")">guest</MudSelectItem>
        </MudSelect>        
    </MudPaper>
    <br/>
    <MudPaper Class="d-flex justify-end flex-grow-1 gap-4">
        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Success" OnClick="@(() => OnRetrieve(null!))">@Localizer["LBL0043"]</MudButton>
        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Info" OnClick="@(() => OnCreate(null!))">@Localizer["LBL0020"]</MudButton>
        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Warning" OnClick="@(() => OnUpdate(null!))">@Localizer["LBL0022"]</MudButton>
        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="@(() => OnDelete(null!))">@Localizer["LBL0021"]</MudButton>
        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="ShowSnackBar">SNACKBAR</MudButton>
    </MudPaper>
    <br/>

    <MudDataGrid T="User" Items="@UserList" EditMode="DataGridEditMode.Form" @bind-SelectedItem="SelectedUser">
        <Columns>
            @if (IsMultiSelection)
            {
                <SelectColumn T="User"/>    
            }
            <PropertyColumn Property="m => m.Id"/>
            <PropertyColumn Property="m => m.Name"/>
            <PropertyColumn Property="m => m.Email"/>
            <PropertyColumn Property="m => m.RoleName"/>
            @if (IsMultiSelection.xIsFalse())
            {
                <TemplateColumn>
                    <CellTemplate>
                        <MudButton OnClick="@(() => MudDialog.Close(context.Item))">apply</MudButton>
                    </CellTemplate>
                </TemplateColumn>
            }
        </Columns>
        <PagerContent>
            <MudDataGridPager T="User" />
        </PagerContent>
    </MudDataGrid>

    @* <MudItem> *@
    @*     <MudPaper Class="pa-4"> *@
    @*         <MudForm> *@
    @*             <MudTextField T="string" Label="Name" Required="true" RequiredError="User name is required!" @bind-Value="SelectedUser.Name"/> *@
    @*             <MudTextField T="string" Label="Email" Required="true" RequiredError="User email is required!" @bind-Value="SelectedUser.Email"/> *@
    @*             <MudSelect T="Role" Label="Role" @bind-Value="@SelectedUser.Role" ToStringFunc="@Role.ConvertRoleToRoleName"> *@
    @*                 @foreach (var role in Role.GetRoles()) *@
    @*                 { *@
    @*                     <MudSelectItem Value="role">@role.RoleName</MudSelectItem> *@
    @*                 } *@
    @*             </MudSelect> *@
    @*             <MudSelect Label="Parameter Test" @bind-Value="itemId"> *@
    @*                 <MudSelectItem Value="0">0</MudSelectItem> *@
    @*                 <MudSelectItem Value="1">1</MudSelectItem> *@
    @*                 <MudSelectItem Value="2">2</MudSelectItem> *@
    @*                 <MudSelectItem Value="3">3</MudSelectItem> *@
    @*             </MudSelect> *@
    @*             <RestSelectControl Label="Rest Select Control1" Selector="Selector" @bind-SelectedValue="selected1Value" ItemId="itemId"/> *@
    @*         </MudForm> *@
    @*     </MudPaper> *@
    @* </MudItem> *@

    @* <label>SelectControl1 Result : @selected1Value</label> *@
</MudContainer>

<MudButton OnClick="OpenDialog">Dialog Open</MudButton>
<MudText>MultiSelection Mode: @IsMultiSelection</MudText>
<MudDialog></MudDialog>
@code {
    
    List<User> UserList = new();
    User SelectedUser = new();

    int itemId;

    string selected1Value;
    
    protected override async Task OnInitViewData()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParameters = QueryHelpers.ParseQuery(uri.Query);
        if (queryParameters.TryGetValue("rolename", out var rolename))
        {
            this.RoleName = rolename.ToString().xValue<string>("guest");
        }
        await base.OnInitViewData();
    }

    protected override Task OnInitRetrieve()
    {
        var roles = Role.GetRoles();
        UserList = new List<User>();
        UserList.Add(new User(1, "test1", "test1@test.com", roles[0]));
        UserList.Add(new User(2, "test2", "test2@test.com", roles[1]));
        UserList.Add(new User(3, "test3", "test3@test.com", roles[1]));
        UserList.Add(new User(4, "test4", "test4@test.com", roles[2]));

        this.SelectedUser = UserList[0];
        return base.OnInitRetrieve();
    }

    protected override Task OnRetrieve(Func<Task<Result>> func)
    {
        func = async () =>
        {
            await Task.Delay(1000);
            return new Result(true, "succeed");
        };
        return base.OnRetrieve(func);
    }

    protected override Task OnDelete(Func<Task<Result>> func)
    {
        func = async () =>
        {
            await Task.Delay(1000);
            return new Result(false, "null reference exception");
        };
        return base.OnDelete(func);
    }

    void RoleChanged(string p)
    {
        this.NavigationManager.NavigateTo(@$"/settings/users?rolename={p}", true);
    }

    void ShowSnackBar()
    {
        var name = SelectedUser.Name;
        var rolename = SelectedUser.RoleName;
        var email = SelectedUser.Email;
        RenderFragment fragment = (builder) =>
        {
            builder.OpenElement(0, "div");
            builder.OpenElement(1, "h3");
            builder.AddContent(2, "Hi from a RenderFragment");
            builder.CloseElement();

            builder.OpenElement(3, "ul");

            builder.OpenElement(4, "li");
            builder.AddContent(5, name);
            builder.CloseElement();

            builder.OpenElement(6, "li");
            builder.AddContent(7, rolename);
            builder.CloseElement();

            builder.OpenElement(8, "li");
            builder.AddContent(9, email);
            builder.CloseElement();

            builder.CloseElement(); // Close ul
            builder.CloseElement(); // Close div
        };
        this.Snackbar.Add(fragment);   
    }

    private async Task OpenDialog()
    {
        var parameters = new DialogParameters<Users>()
        {
            {m => m.IsMultiSelection, false}
        };
        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.ExtraLarge,
            CloseButton = true,
        };
        var dlg = await DialogService.ShowAsync<Users>("user dlg", parameters, options);
        var result = await dlg.Result;
        if (!result.Canceled)
        {
            this.Snackbar.Add($"selected id: {result.Data.xAs<User>().Id}", Severity.Info);
        }
    }
}