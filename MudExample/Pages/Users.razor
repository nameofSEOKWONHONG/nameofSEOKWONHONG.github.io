@page "/settings/users"
@using eXtensionSharp
@using Microsoft.AspNetCore.WebUtilities
@using MudExample.Components
@using MudExample.Data
@inject Selector Selector
@inject HttpClient HttpClient

@inherits MudExample.Components.Base.SessionPageComponent

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudBreadcrumbs Items="@Breadcrumbs"></MudBreadcrumbs>

    <MudPaper Class="d-flex justify-center flex-grow-1 gap-4">
        <MudSelect T="string" Label="Role" ValueChanged="RoleChanged" Value="RoleName">
            <MudSelectItem Value="@("administrator")">administrator</MudSelectItem>
            <MudSelectItem Value="@("user")">user</MudSelectItem>
            <MudSelectItem Value="@("guest")">guest</MudSelectItem>
        </MudSelect>        
    </MudPaper>
    <br/>
    <MudPaper Class="d-flex justify-end flex-grow-1 gap-4">
        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Success" OnClick="@(() => OnRetrieve(null!))">@Localizer["LBL0043"]</MudButton>
        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Info" OnClick="@(() => OnCreate(null!))">@Localizer["LBL0020"]</MudButton>
        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Warning" OnClick="@(() => OnUpdate(null!))">@Localizer["LBL0022"]</MudButton>
        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="@(() => OnDelete(null!))">@Localizer["LBL0021"]</MudButton>
    </MudPaper>
    <br/>
    
    <MudPage Class="mud-border-info border-2 border-solid" Column="2" Row="4" Height="1200px">
        <MudSection Column="1" ColSpan="1" Row="1" RowSpan="4">
            <MudDataGrid Items="@UserList" EditMode="DataGridEditMode.Form" @bind-SelectedItem="SelectedUser">
                <Columns>
                    <SelectColumn T="User" />
                    <PropertyColumn Property="m => m.Id"/>
                    <PropertyColumn Property="m => m.Name"/>
                    <PropertyColumn Property="m => m.Email"/>
                    <PropertyColumn Property="m => m.RoleName"/>
                    <PropertyColumn Property="m => m.WeatherDate"/>
                    <PropertyColumn Property="m => m.WeatherSummary"/>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="User" />
                </PagerContent>
            </MudDataGrid>
        </MudSection>
        <MudSection Column="2" ColSpan="1" Row="1" RowSpan="4" Class="pa-4">
            <MudItem>
                <MudPaper Class="pa-4">
                    <MudForm>
                        <MudTextField T="string" Label="Name" Required="true" RequiredError="User name is required!" @bind-Value="SelectedUser.Name"/>
                        <MudTextField T="string" Label="Email" Required="true" RequiredError="User email is required!" @bind-Value="SelectedUser.Email"/>
                        <MudSelect T="Role" Label="Role" @bind-Value="@SelectedUser.Role" ToStringFunc="@Role.ConvertRoleToRoleName">
                            @foreach (var role in Role.GetRoles())
                            {
                                <MudSelectItem Value="role">@role.RoleName</MudSelectItem>    
                            }
                        </MudSelect>
                        <MudSelect Label="Parameter Test" @bind-Value="itemId">
                            <MudSelectItem Value="0">0</MudSelectItem>
                            <MudSelectItem Value="1">1</MudSelectItem>
                            <MudSelectItem Value="2">2</MudSelectItem>
                            <MudSelectItem Value="3">3</MudSelectItem>
                        </MudSelect>
                        <RestSelectControl Label="Rest Select Control1" Selector="Selector" @bind-SelectedValue="selected1Value" ItemId="itemId"/>
                    </MudForm>                    
                </MudPaper>
            </MudItem>

            <label>SelectControl1 Result : @selected1Value</label>
        </MudSection>
    </MudPage>
</MudContainer>

@code {
    List<User> UserList = new List<User>();
    User SelectedUser = new User();

    int itemId;

    string selected1Value;

    protected override async Task OnInitViewData()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParameters = QueryHelpers.ParseQuery(uri.Query);
        if (queryParameters.TryGetValue("rolename", out var rolename))
        {
            this.RoleName = rolename.ToString().xValue<string>("guest");
        }
        await base.OnInitViewData();
    }

    protected override Task OnInitRetrieve()
    {
        var roles = Role.GetRoles();
        UserList.Add(new User(1, "test1", "test1@test.com", roles[0]));
        UserList.Add(new User(2, "test2", "test2@test.com", roles[1]));
        UserList.Add(new User(3, "test3", "test3@test.com", roles[1]));
        UserList.Add(new User(4, "test4", "test4@test.com", roles[2]));
        return base.OnInitRetrieve();
    }

    protected override Task OnRetrieve(Func<Task<Result>> func)
    {
        func = async () =>
        {
            await Task.Delay(1000);
            return new Result(true, "succeed");
        };
        return base.OnRetrieve(func);
    }

    protected override Task OnDelete(Func<Task<Result>> func)
    {
        func = async () =>
        {
            await Task.Delay(1000);
            return new Result(false, "null reference exception");
        };
        return base.OnDelete(func);
    }

    void RoleChanged(string p)
    {
        this.NavigationManager.NavigateTo(@$"/settings/users?rolename={p}", true);
    }
}